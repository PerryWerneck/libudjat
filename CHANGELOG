-------------------------------------------------------------------
Thu Oct 16 21:07:24 UTC 2025 - perry.werneck@gmail.com

- Update to version 2.2.2+git20251016:
  * Adding option to set default log filename.
  * Better handling of legacy versions.
  * Updating private key cipher, setting it to configurable.
  * Fixing win32 package.
  * Adding template make_handle to generate shared_ptrs from standard C handlers.
  * Implementing singleton with the default openssl provider.
  * rsa_ptr is required only if HAVE_TPM2_TSS_ENGINE_H
  * Adding public method to check for log decoration.
  * Refactoring cryptographic engine.
  * Disabling log decoration when output is a file.
  * Debugging TPM2TSS OpenSSL engine.
  * Fixing package build.
  * Using subprocess to generate engine based crypto key (for now).
  * Adding Module::name() method.
  * Listing loaded module when running unit tests in debug mode.
  * Fixing log file path outside the standard directory.
  * Adding Activatable::available() to check if an action can be activated.
  * Renaming Object::parse() to Object::setup to avoid conflicts with parser objects.
  * Refactoring object factories.
  * Refactoring agent parser.
  * Reenabling deprecated call.
  * Refactoring object parser.
  * Refactoring agent factories.
  * Debugging object factories.
  * Fixing deprecation message.
  * Refactoring object factories.
  * Debugging XML parsers.
  * Appending child object after factory.
  * Auto inserting object children.
  * Adding 'parse-children' method on Abstract::Object
  * Adding convenience method to get module path from ptr.
  * Adding convenience method to get symbols from current app.
  * Supressing valgrind warns from system libs, Implementing XML::PathFactory to sanitize/defaults XML definitions path.
  * Adding xml option to enable run script thru an env+sudo shell.
  * Adding convenience container for activatables.
  * Debugging legacy builds.
  * Removing bugged code.
  * Adding method to register pre-defined actions.
  * Refactoring action controller.
  * Refactoring action factory.
  * Better parsing of objects.
  * Debugging win32 tmpdir.
  * Fixing win32 builds.
  * Removing debug message.
  * Showing locale path on trace output.
  * Fixing segfault on empty logger domain.
  * Adding 'tmpdir' macro.
  * Fixing segfault on scheme for empty url.
  * Debugging url local()/remote() methods.
  * Debugging static pkgconfig for legacy.
  * Adding convenience method do copy a xml document to another document node.
  * Using Udjat::String for tempfilenames.
  * Better handling of win32 registry.
  * Fixing for_each for iniparser (legacy) config handler.
  * Changing 'config::for_each' to the same results of other for_each methods, implementing test case for it.
  * Fixing dead-lock on console dialog.
  * Adding convenience method to replace url hostname.
  * Fixing legacy builds.
  * Debugging legacy builds.
  * Removing unused sources, changing lock guards to 'mutable'.
  * Closing release 2.0.2

-------------------------------------------------------------------
Tue Jul 08 10:35:05 UTC 2025 - perry.werneck@gmail.com

- Update to version 2.0.2+git20250708:
  * Updating package control files.
  * Adding dependency for libdl.
  * Making dmiget & vmdetect optional.
  * Better integration with gi18n, fizing quark include.
  * Adding XML::parse_children, for convenience.
  * Adding product-domain on pkg-config info.
  * Adding methods to get XML::Parser name.
  * Better handling of static builds.
  * Better handling of libeconf.
  * Handling SMBIOS urls.
  * Enhancing meson dependencies.
  * Updating i18n files.
  * Allways apply custom expanders.
  * Debugging attribute parser.
  * Fixing build of legacy modules.
  * Implementing callback on test app initialization.
  * Adding network info tools.
  * Backporting to legacy C++11 systems.
  * Adding parser for <interface>
  * Adding stream << operator on agent templates.
  * Adding commandline options list on SystemService.
  * Abending in case of first configuration fails.
  * Better handling of xml loading failures.
  * Tracing agent tree.
  * SIGHUP on linux will reload XML definitions.
  * Refactoring xml parser.
  * Refactoring url parser.
  * Refactoring command-line option parser.
  * Better logging for url handlers.
  * Setting default options for standard help.
  * Fixing String::erase()
  * Working on console UI.
  * Implementing convenience 'erase' method on Udjat::String.
  * Using iniparser as fallback when econf is not available.
  * Refactoring XML loader.
  * Enhancing logger options.
  * Fixing 'lto' error on tumbleweed.
  * Adding standard expander in File::Text
  * Adding convenience method to get default interface.
  * Refactoring default gateway method.
  * Implementing text based progress dialog.
  * Whatching unexpected exception when running in service mode.
  * Refactoring application startup/setup.
  * Fixing deprecated declarations, expanding strings from configuration file.
  * Adding ${appname} expander.
  * Better options for console applications.
  * Adding convenience method for progress bars on console.
  * Logging tempfile name on download failure.
  * Sanitizing URL path, better 'connecting' message.
  * Publishing updated version 2.0.0
  * Adding option to expand only part of the results in strings, example: "The value 1:6 is '${value[1:6]}'"
  * Adding convenience method to save URL to temporary file.
  * Reimplementing 'save-to-cache' feature on URLs.
  * Using on glib mainloop, if available, only in linux.
  * Working on win32 mainloop
  * Adding convenience method to post messages using glib mainloop.
  * Splitting file.h by class.
  * Updating win32 mainloop, removing old codeblocks control files.
  * Better handling of sysid urls.
  * Better logging of root agent summary.
  * Starting bind to glib mainloop.
  * Capturing glib message if available.
  * Better handling of connection status.
  * Fixing connection error handler.
  * Getting morde NIC infos.
  * Checking liburiparser version.
  * Working with string operators.
  * Removing unused scripts, better event factories.
  * Adding method URL::port().
  * Adding convenience method to get agent state from URL.
  * Refactoring handlers for URL schemes script & file.
  * Adding convenience Socket::close()
  * Adding convenience method to wait for connection to stablish.
  * Better URL handlers.
  * Adding convenience component 'Socket'.
  * Detecting rpm and the right path for rpm macros installation.
  * Fixing report <<
  * Adding convenience method to build string from floating values.
  * Implementing xml parser on timer().
  * Timer::enable() now returns true/false depending on the previous state.
  * Implementing stream operator for reports.
  * Expanding ${} while opening a file handler.
  * Implementing factory for custom states.
  * Adding convenience 'percent' agent.
  * Fixing last change.
  * Moving singleton constructor to public.
  * Adding convenience method to convert integer to hex strings.
  * Detecting action type from attributes when 'type=' is undefined.
  * Fixing alert definitions.
  * Publishing updated version 2.0.0
  * Refactoring alert engine.
  * Adjustments on String::split().
  * Adding agent introspection.
  * Handling introspection.
  * Better interface handling.
  * Using a singleton for agent actions.
  * Working on simple action interfaces, removing unused methods from agent controller.
  * Implementing agent action.
  * Removing http related fields from Request()
  * Interface::Handler is now public.
  * Better formatting for html output.
  * Fixing stack overflow caused by Response::to_string() calling Response::serialize() who calls Response::to_string() ...
  * Adding method to get handler name.
  * Allowing customization of Interface::Handler name, adding 'errno' based failure on response.
  * Allowing script with multiple actions.
  * Fixing segfault on Value::merge.
  * Adding 'struct tm' constructor and parser for TimeStamp().
  * Debugging value merge().
  * Allowing merge on undefined values.
  * Search for type on parent nodes when building an action.
  * Fixing legacy factories.
  * XML tag <init> now can call actions.
  * Accepting only 'get' requests on interface.
  * Implementing abstract action.
  * Fixing deprecation definitions.
  * Better logging when using internal agent types.
  * Refactoring agent factory.
  * Renaming base class Method -> Interface.
  * Better handling of agent responses.
  * Adding more failed() options on response.
  * Updating response & package control file.
  * Refactoring request/response engine.
  * Refactoring sysconfig reader.
  * Adding method to enable/disable fallback to user home dir when searching for configuration files.
  * Changing build system to meson.
  * Adding 'logging' method on Udjat::Exception.
  * Betting log when the configuration file is missing.
  * Fixing abend on startup.
  * Allowing customized console & file log writers.
  * Updating win32 package.
  * Updating translation.
  * Fixing win32 build.
  * Adding convenience methods to check strings prefix & suffix
  * use of default name for NamedObject shouldnt be a warning.
  * Adding default log domain.
  * Adding convenience method to navigate on XML nodes.
  * Adding optional SMBIOS library.
  * Adding convenience method to get boolean attributes from xml.
  * Convenience methods for hash() and equal()
  * Adding string expansion based on xml + custom marker.
  * Updating package control files.
  * Small refactor on timer controller.
  * Adding convenience method for file/directory enumeration.
  * Setting 'minimal build' version for modules.
  * Adjustments in abstract mainloop.
  * Removing unnecessary methods from abstract mainloop.
  * Fixing win64 build.
  * Adding placeholder and method to get http status code of last operation.
  * Fixing build of legacy applications.
  * Fixing abend on log folder permissions.
  * Fixing agent startup.
  * Fixing composed protocol names.
  * Fixing url scheme search.
  * Fixing alert factory.
  * Fixing exception on agent query, implementing query [agent-path]/states to get agent internal state list.
  * Fixing http responses.
  * Fixing response object.
  * Fixing segfault when there's no root agent.
  * Better state alerts.
  * Fixing state alerts.
  * Fixing smbios summary.
  * Allowing get 'formatted' values from URLs.:
  * Fixing package build.
  * Fixing legacy builds.
  * Fixing package build.
  * Atualizando empacotamento.
  * Refactoring response types, adding Response::Object
  * Refactoring agent searcher.
  * Better protocol handler.
  * Better handlers for file:/// & script:///
  * Implementing proxy to allow using URLs [WORKER-NAME]:///[WORKER-PATH]
  * Updating package control files.
  * Fixing package build.
  * Implementing option to block net-stop.
  * Fixing build error.
  * Importing windows security classes.
  * Fixing windows package.
  * Adding version macro.
  * Allowing change of handler's file description without exception.
  * Searching product icons first.
  * Fixing segfault on invalid http request.
  * Implementing missing method.
  * Adding convenience method.
  * Enhancing Report::Table.
  * Better logging when message parser fails.
  * Fixing unexpected exception on protocol information.
  * Implementing convenience class for customized api calls.
  * Refactoring factories.
  * Fixing legacy builds.
  * Refactoring 'factory' engine.
  * Refactoring factories.
  * Better handling of request paths.
  * Fixing segfault on request test.
  * Implementing convenience method to extract path from request.
  * Better property handling on abstract::object.
  * Better http exceptions.
  * Refactoring request as Abstract::Object.
  * Refactoring HTTP::Exception as an Udjat::Exception.
  * Value is now an abstract::object.
  * Using numeric names for path based arguments on Request::';
  * Better documentation on expires.
  * Better Method and TimeStamp builders.
  * Adding trace method placeholder on Module::
  * Implement response type factories.
  * Using symbols for boolean values on html output.
  * Better cache headers, allowing extra customized headers on response.
  * Better response serialization.
  * Better exception handling.
  * Better error output.
  * Adding cache headers in abstract response.
  * Adding placeholders for count & range headers on abstract::response.
  * Fixing orphaned alert activation.
  * Adding convenience method.
  * Fixing attribute search.
  * Better log message when alert build fails.
  * Worker::ResponseType should be public.
  * Enhancing Worker::probe.
  * Allowing the worker to decide the response type.
  * Fixing HTTP error codes.
  * Fixing alert constructor.
  * Refactoring quark from XML to use string expansion.
  * Small refactor on XML parser.
  * Refactoring xml parser.
  * Better string from XML.
  * Using alias to xml node.
  * Allowing enabling/disabling file watchers.
  * Implementing win32 file watcher.
  * Cleaning code, adding some docs.
  * Refactoring file watcher.
  * Fixing get properties.
  * Enhancing agent query by path.
  * Adding path to get only the agent state.
  * Fixing 'response::table' query.
  * Refactoring table response.
  * Letting the application handle exceptions in exec(request,response).
  * Implementing templates for simple html response.
  * Searching icons first on cache.
  * Playing with icon cache.
  * Commenting 'playground' block
  * Playing with icon cache.
  * Fixing response header.
  * Better logging while searching for icon.
  * Adding method to get icon filename.
  * Better response failed states.
  * Better http-error-code<->system-error-code conversion.
  * Mapping errno == 0 to http state 200.
  * Better abstract response.
  * Adding Abstract::Response::to_string() method as an empty placeholder.
  * Better error management while executing requests.
  * Using state time as last_modified when update time is not available.
  * Debuggin cache management.
  * Better cache information.
  * Better request/response error management.
  * Formatting json report.
  * Better json response.
  * Using jsend for json responses. (Reference: https://github.com/omniti-labs/jsend)
  * Fixing getproperties.
  * Better detection of 'last-modified' header.
  * Better XML converters.
  * Implementing sockaddr_in to_string.
  * Fixing file basename()
  * Refactoring report.
  * Implementing convenience method to serialize  values to strings.
  * Implementing CSV exporter.
  * Implementing value serialization.
  * Adding authentication test for Request::
  * Implementing String::escape().
  * Implementing String::unescape.
  * Adding form mimetype.
  * Implementing simple File::Path::load();
  * Updating File::Path.
  * Adjustment on base64 class.
  * Working on win32 port.
  * Fixing win32 package.
  * Updating win32 port.
  * Implementing toString() with default value in Udjat::Value.
  * Adding method to get generic properties from worker.
  * Adjustments in the new Worker class methods.
  * Better request/response engine.
  * Better error messages.
  * Fixing argument parser.
  * Better select() methods.
  * Better select() no string, adding select() on request.
  * Fixing request.h
  * Working on agent list.
  * Reactivating report output.
  * Refactoring report.
  * Implementing argument parser for Request.
  * Fixing module build.
  * Adding more mime types.
  * Managing operator[] on const values.
  * Replacing operator [] from method child on Value class.
  * Implementing dummy Value::Empty().
  * Fixing Response::Value type.
  * Refactoring response.
  * Adding URL data type.
  * Adding more ways to exec a request.
  * Refactoring response.
  * Better parameter order for request{}
  * Adding method to test for cache state.
  * Refactoring request.
  * Cleaning some includes.
  * Adding exception whith title, message and body.
  * Fixing icon definition.
  * Fixing ui::Icon
  * Fixing name of icon type.
  * Adding special type for icon values.
  * Updating debian shlib.
  * Updating translation; adding 'Icon' class.
  * Updating C++ level, better for each and type tests on Value class.
  * Fixing string split.
  * Implementing missing mimetype factory.
  * Small fix in mimetypes.
  * Fixing agent data request.
  * Adding compatility header.
  * Restoring version.
  * Small refactor in worker engine.
  * Adding Value::isNumber() method.
  * Implementing generic object.
  * Fixing String::split().
  * Fixing package build.

-------------------------------------------------------------------
Mon Feb  5 18:57:16 UTC 2024 - Perry Werneck <perry.werneck@gmail.com>

- Last minute fixes
  * Allow-changing-of-handler-file-description.patch fix a problem with d-bus socket handlers.
  * add_version_check_macro.patch Allow modules to detect the core library version and adjust themselfs.

-------------------------------------------------------------------
Mon Feb 05 15:49:14 UTC 2024 - perry.werneck@gmail.com

- Update to version 1.1+git20230808:
  * Update codeql.yml
  * Update msys2.yml
  * Updating to latest vmdetect.
  * Update msys2.yml
  * Fixing win32 package.
  * Adding methods to get file's modification timestamp.
  * Fixing modtime.
  * Refactoring protocol worker.
  * Updating rpm control file.
  * Allowing conversion of File::Handle to system handler (int) for use with standard C APIs.
  * Debugging protocol worker.
  * Better protocol worker.
  * Fixing a few codeql warnings.
  * Fixing codeql alert.

-------------------------------------------------------------------
Wed Jul 12 14:38:41 UTC 2023 - perry.werneck@gmail.com

- Update to version 1.1+git20230712:
  * Updating win32 package.
  * Allowing custom console writer.
  * Updating license file, converting agent promotion message to trace.
  * Fixing system service class.
  * Readding method for compatibility.
  * Changing service icon when running on virtual machine.
  * Adding custom writer method on URL.
  * Fixing codeql alert.
  * Better log messages.
  * Debugging byte value parser.
  * Better unit names.
  * Fixing byte converters.
  * Implementing operator '+' on URLs.
  * Better log messages.
  * Sppliting command line parser.
  * Backporting to win32.
  * Refactoring service command line parser.
  * Adding '-f' option.
  * Refactoring command line argument parser.
  * Adding 'realpath' method on file::path
  * Better decoding of filename urls.
  * Adding convenience methods and more constructors on URL.
  * Adding xml search method.
  * Adding file allocate/truncate methods.
  * Fixing file handler class.
  * Adding more custom writer based methods.
  * Small adjustment.
  * Better tempdir.
  * Fixing package, protocol worker now has a customized writer option.
  * Better name for File::Handler.
  * Adding file save with custom writer.
  * Creating 'abstract::file' with some convenience methods.
  * Adding method to create and allocate temporary file.
  * Better attribute allow/deny options.
  * Better string factory from xml.
  * Fixing package build.
  * Adding XML::QuarkFactory.
  * Using module search paths.
  * Adding public method to get module search paths.
  * Adding module version on pkg-config files.
  * Fixing codeql warning and string build from array.
  * Debugging mingw package.
  * Fixing temporary files on fat disks.
  * Adding command-line argument parser.

-------------------------------------------------------------------
Sat Apr 29 15:04:02 UTC 2023 - perry.werneck@gmail.com

- Update to version 1.1.0+git20230429:
  * Fixing argument parser.
  * Debugging subprocess.
  * Fixing byte value conversion.
  * Fixing progress dialog.
  * Better command line parser.
  * Better subprocess argument parser.
  * Fixing win32 package.
  * Fixing subproccess.
  * Adding popen() alternative for sub process.
  * Fixing subproccess argument list.
  * Better log on subprocess exit.
  * Subprocess except on too many arguments.
  * Debugging subprocess.
  * Fixing protocol auto loader.
  * Allowing optional auto loading of protocol handlers.
  * Implementing xml document loader.
  * Removing unused code.
  * Testing if module is already loaded by name.
  * Adding convenience method for object properties.
  * File::move now uses stats from origin when target not exists.
  * Better log entries on file::move.
  * Adding mingw package control file.
  * Updating doc builder.
  * Getting marker from xml node.
  * Better document.
  * Allowing customized marker on string expander.
  * Allowing exceptions on getProperties().
  * Allowing exception on all getProperties methods.
  * Allowing exceptions in Object::getProperty().
  * Adding pre/post methods on Udjat::SubProcess
  * Fixing problem with O_TMPFILE.
  * Allowing modules withou product name.
  * Fixing safe update flag.
  * Using localtime_s on windows.
  * Build mingw package only on 'master' PRs
  * Update PKGBUILD.mingw
  * Update ci-build.sh
  * Using packages instead of .tar.xz files.
  * Enabling msys build on every develop push.
  * Using packages on ci-build.
  * Debugging xml validation.
  * Better systemd status messages.
  * Better auto-update, fixing systemd status, removing unused code.
  * Fixing systemd watchdog.
  * Update msys2.yml
  * Updating win32 workflow.
  * Adding application initialize/finalize methods.
  * Adding static Application::setup method.

-------------------------------------------------------------------
Mon Mar 27 13:08:59 UTC 2023 - perry.werneck@gmail.com

- Update to version 1.1+git20230321:
  * Fixing exception when starting as a user.
  * Fixing Win32 Application::DataFile class.
  * Fixing linux build.
  * Fixing logfile abend on windows.
  * Debugging win32 logdir management.
  * Allow customizing of win32 application log path.
  * Better error messagem on app description failures.
  * Fixing win32 service help, adding --reinstall service option.
  * Default states must be loaded after the defined ones.
  * Fixing CodeQL alerts.
  * Fixing permissions.
  * Fixing win32 build.
  * Still fixing Udjat::Message.
  * Fixing Logger::Message
  * Removing unused code, Only reset agent update timer on return of 'refresh()' if the value is expired to avoid reset timers set by agent during the call of refresh().
  * Enhancing Udjat::String.
  * Fixing MAC address detection on linux.
  * Adding IP::Address factory for AF_PACKET sockets.
  * Fixing auto-update.
  * Fixing linux package.
  * Debugging win32 core.
  * Fixing win32 build.
  * Small adjustment.
  * Better error control on auto-update.
  * Better error control in auto-update.
  * Refactoring auto-update.
  * Fixing root agent change notifications.
  * Renaming StateFactory to Abstract::State::Factory.
  * Fixing agent icon.
  * Fixing package build.
  * Updating win32 network methods.
  * Refactoring linux network 'for_each' methods.
  * Adding to_string(sockaddr) and linux interface getProperties().
  * Better com object.
  * Simple com wrapper.
  * Implementing linux carrier method for network interface, enhanding Udjat::Object.
  * Better label & icon on objects.
  * Fixing agent timers.
  * Adding more inline methods on Abstract::State.
  * Fixing win32 package.
  * Better script alert.
  * Improving alert/agent scripts.
  * Enhancing subprocess tool.
  * Fixing scheduled update.
  * Adding 'empty' method to container.
  * Updating Abstract::State
  * Updating windows resources.
  * Adding const iterators.
  * Refactoring agent report generator.
  * Update README.md
  * Better agent path management, removing deprecated methods.
  * Fixing properties by path.
  * Refactoring agent paths and responses.
  * Debugging system service.
  * Updating configure.ac
  * Reverting autoupdate.
  * Updating configure.ac, debugging win32 service start,stop,install & uninstall.
  * Refactoring win32 install, uninstall, start and stop service.
  * Fixing instance and timed service status.
  * Fixing linux system service.
  * Refactoring win32 system service.
  * Fixing common methods and console output.
  * Refactoring service.
  * Refactoring linux system service.
  * Fixing win32 module loading.
  * Fixing mkdir.
  * Update codeql.yml
  * Fixing module scan.
  * Copy abstract agents or passing them by value to methods can cause a lot of strange behaviors.
  * Enhancing containers.
  * Enhancing singleton container.
  * Fixing log verbosity and command line parser.
  * Fixing log verbosity.
  * Commenting unused method.
  * Adding helpers for setup & module load.
  * better string selection on request, using alternative names on linux module search.
  * Fixing module startup.
  * Implementing protocol's standard 'for_each' method.
  * Fixing CodeQL warnings.
  * Adding missing include.
  * Refactoring win32 service.
  * Decoupling service objects from mainloop.
  * Adding simple template for container.
  * Implementing template for the singleton controllers.
  * Implementing standar for_each method in containers.
  * Replacing the old 'getinfo' for the more standard method 'getproperties'.
  * Fixing linux version.
  * Debugging win32 mainloop.
  * Debugging timers.
  * Refactoring linux timers.
  * Refactoring win32 timers.
  * Moving linux handler management to internal mainloop class.
  * Adding method to quit mainloop with message.
  * Refactoring win32 mainloop
  * Refactoring linux mainloop.
  * Moving services for OS mainloop.
  * Refactoring mainloop.
  * Fixing linux build.
  * Debuggin win32 package.
  * Debugging win32 shortcuts
  * Debugging win32 shorcuts
  * Improving application mode.
  * Fixing win32 build.
  * Adjustments in application mode.
  * Better test program.
  * Updating win32 application mode.
  * Refactoring application mode.
  * Fixing verbosity.
  * Implementing application mode.
  * Implementing log verbosity options.
  * Updating translation.
  * Fixing windows resource file translation info.
  * Debuggin shortcut class.
  * Implementing win32 shortcut.
  * Debugging on windows/msys
  * Removing unused libraries.
  * Debugging windows.
  * Fixing load settings from userdir.
  * Better win32 error logging.
  * Setting windows version in 'defs' include.
  * Updating windows versions.
  * Reactivating linux ifaddr for_each tool.
  * Better IP::Address constructors.
  * Removing unused code, allowing override of agent::empty method.
  * Updating win32 packate control file.
  * Fixing IP:Address, updating translation and package control file.
  * Fixing package build.
  * Debugging IP address abstraction.
  * Fixing network abstraction classes.
  * Improving IP::Address
  * Implementing ip address abstraction.
  * Fixing changelog.
  * Updating package control files.
  * Fixing win32 package.
  * Implementing NIC abstraction for windows.
  * Adding method to send signal do all instances of process.
  * Fixing log messages.
  * Updating translation.
  * msys debug.
  * Fixing linux build.
  * Fixing win32 log path.
  * Debugging win32 logger.
  * Fixing logger initialization.
  * Better application initialization on linux.
  * Better application initialization on windows.
  * Refactoring File::Path to allow using a limited set of ${} macros.
  * Fixing win32 logdir.
  * Fixing win32 package.
  * Refactoring linux application paths.
  * Refactoring win32 application paths.
  * Updating win64 control files.
  * Adding application and folder types.
  * Implementing File::Path by datatype.
  * Adding placeholders for linux shortcuts.
  * Implementing windows shortcut.
  * Initializing win32 comm.
  * Better win32::COM exception handler.
  * Working on shortcut abstraction.
  * Adding 'todo' note.
  * Better error handling on win32.
  * Debugging new windows & linux auto update. Updating some pt-br translations.
  * Refactoring auto update.
  * Refactoring agent builder.
  * Refactoring xml parser.
  * Improving win32 methods.
  * Adding linux parser for option --install
  * Better root state.
  * Adding option for win32 shortcut.
  * Updating pkg-config files, fixing win32 module loader.
  * Translating HTTP error code.
  * Better states for URL Agent.
  * Implementing http error code handler.
  * Adding default 'url' type agent.
  * Setting default xml service definition to './debug.xml' when compiling with -DDEBUG, better error message when unable to find the service definitions.
  * Fixing windows include.
  * Debuggin interrupt handler.
  * Refactor string to bool conversion.
  * Refactoring activation ${} parser.
  * Disabling auto update of deb control files.
  * Fixing agent/action parser.
  * Version adjustments.
  * Updating readme.
  * Updating deb control files.
  * Updating 'deb' control files.
  * Renaming deb control files.
  * Fixing startup notifications.
  * Refactoring xml based factories.
  * Refactoring agent loader.
  * Adding agent and alert factories directly from module.
  * Fixing CodeQL alerts.
  * Fixing window file 'for_each'.
  * Fixing file copy/move.
  * Fixing CodeQL alert.
  * Adjustments in 'script://' handler.
  * Updating msys2 workflow adding 'bak' option in File::copy.
  * Adding mingw build action.
  * Fixing file copy.
  * Getting homedir with uid api instead of getenv to fix alert from CodeQL.
  * Changing README.md
  * debug and trace messages are now disabled by default.
  * Fixing win32 library.
  * Fixing windows package build.
  * Implementing message based logging in namedobject, changing subprocess class to use them.
  * Adjustments in include files.
  * Refactoring log message.
  * Implementing standard message object.
  * Refactoring 'Logger::String'.
  * Refactoring string templates.
  * Small adjustments.
  * Update README.md
  * Adding badges
  * Using ~/.cache/appname for non-root users.
  * Better 'string from xml' construtor.
  * CacheDir is now a File::Path.
  * Implementing double value version for String::set_byte().
  * Adding byte value conversion on string.
  * Adding simple parser for <b> markup.
  * Implementing test for regular files.
  * Removing unused header.
  * Allowing hook on protocol actions for use with gui applications.
  * Re-enabling module preload from configuration file.
  * class URL is now a Udjat::String.
  * Implementing module load by file/path name.
  * Fixing linux File::Path::remove().
  * Expanding filename to real path on File::Path::for_each
  * Implementing linux version of File::Path::remove()
  * Refactoring win32 version of File::Path
  * Refactoring File::Path 'for_each' method.
  * Moving application methods do their own path.
  * Exporting 'dummy' progress method to allow use on applications.
  * Adding CHANGELOG.
  * Adding a configurable D-Bus product id.
  * Enhancing timestamp parser, fixing some CodeQL alerts.
  * Fixing some CodeQL alerts.
  * Fixing CodeQL alerts.
  * Enhancing argument parser.
  * Implementing 'to_string' on subprocess::argument.
  * Implementing argument list class.
  * Better 'mkdir()' method.
  * Removing unnecessary debug message, fixing codeql alert.
  * Fixing CodeQL warnings.
  * Fixing codeql workflow
  * Adding 'levelnumber' property on abstract state.
  * Fixing CodeQL warnings.
  * Fixing deb dependencies.
  * Update codeql.yml
  * Better suprocess logging.
  * Fixing some CodeQL warnings.
  * Adding converter from text to value applying byte units ('kb','gb','tb') conversions.
  * Fixing some CodeQL alerts.
  * Implementing 'deb' files.
  * Working on deb package.
  * Working on deb package.
  * Adding codeql workflow.
  * Moving child setups to agent controller.
  * Fixing ready/not-ready notifications.
  * Small fixes on script alert, implementing cache filenames.
  * Fixing trigger names.
  * Allowing alerts on ready/not-ready agent states.
  * Fixing win32 build.
  * Changing logtype of signal messages.
  * Allowing customization of root agent states.
  * Updating package control file.
  * Adding logdir subdirectory, implementing default filename for alerts.
  * Allowing set of log levels using configuration file.
  * Fixing default xml path.
  * Fixing module path.
  * Updating translation, packaging with new module path
  * Moving modules to new path.
  * Debugging alert emission.
  * Implementing method to deactivate an active alert-activation.
  * Enhancing activatable class.
  * Acessing state properties from agent object.
  * State requires agent during activation.
  * Fallback to alert on activatable factory.
  * Implementing 'Activatable' factory as an option for alerts.
  * Small fixes on alert emission.
  * Notifing module on root agent changes.
  * Fixing module builds.
  * Small refactor on module class & controller.
  * state class is now using 'activatables' in place of 'alerts'.
  * Refactoring state activation/deactivation.
  * Refactoring agent listener.
  * Fixing alert factory.
  * Debugging alert factories.
  * Using shared_ptr on eventlistener, removing deprecated method.
  * Fixing alert initialization.
  * Fixing state restore after forward.
  * Adding more 'ip2string' methods.
  * Removing unused code.
  * Debugging state forwarder.
  * Adding debug message.
  * Refactoring state forwarder.
  * Fixing first agent state forwarding.
  * Fixing state forwarding.
  * Adding module name in 'cant load' exception.
  * Adding xml based http method factory.
  * Allowing method and payload in URL test().
  * Refactoring url tester.
  * Refactoring URL tester.
  * Fixing url test() method.
  * Debugging state forwarder.
  * Refactoring state machine.
  * Fixing background tasks on root agent.
  * Improving agent and state templates.
  * Getting NIC object by interface name.
  * Reverting to default state when a forwarded agent is disabled.

-------------------------------------------------------------------
Tue Nov 22 18:51:46 UTC 2022 - perry.werneck@gmail.com

- Update to version 1.0+git20221122:
  * Adding < > >= <= state operators.
  * Protecting log buffer from concurrency to avoid 'strange' segfaults when getting instances.
  * Refactoring agent events.
  * Debugging agent updater.
  * Small enhancements in timestamp & namedobject.
  * Fixing state up/down forwarding.
  * Fixing state alerts.
  * Allowing agent state forward to children.
  * Allowing construct of states with pre-defined values.
  * Updating service.
  * Fixing package build.
  * Implementing network interface abstraction (linux only for now).
  * Exporting function to navigate from active NICs.
  * Enhancing alert parser.
  * Implementing file based alerts.
  * Adding win32 handle auto-cleanup methods.
  * Allowing default protocol handler.
  * Fixing package build.
  * Fixing win32 macaddress & nic scanners.
  * Using the first active and valid interface to get macaddress on windows due to limitations of winhttp.
  * Adding missing header, logging windows power events.
  * Debugging network detection.

-------------------------------------------------------------------
Tue Nov 08 13:13:04 UTC 2022 - perry.werneck@gmail.com

- Update to version 1.0+git20221108:
  * Fixing mac address expansion.
  * Fixing url alerts alert expansion.
  * Fixing win32 compatiblity for ips and mac address expansion
  * Expand macaddress and nic on win32 protocol worker.
  * Adding win32 network adapter methods.
  * Expanding ${macaddress} using nic from connection.
  * Implementing windows network info expansion.
  * Working on 'post-connect' http processing.
  * Protocol worker now expands connection info (host & remote IPs) on payload.
  * Avoiding unnecessary calls to win32 settimer().
  * Fixing log enable/disable.
  * Logging error when trying to use virtual machine filter without vmdetect.
  * Fixing URL filter.
  * Adding filters for os & virtual machine.
  * Fixing windows package, using another color for debug messages.
  * Using state label and summary when the agent doesnt have one.
  * Reloading 'logger' options after xml update.
  * Removing domain from root agent name.
  * Forced write of 'logger' options on syslog.
  * Adding generic 'exec' method for modules.
  * Adding XML attribute to enable/disable log types.
  * No need to wakeup() when a timer is disabled.
  * Fixing win32 shutdown handler.
  * Monitoring on shutdown when running as windows service.
  * Moving console handlers to system service.
  * Fixing windows service startup.
  * Logging service delete error.
  * Fixing win32 shutdown handlers.
  * Adding binary data support in windows registry class.
  * Using xml tag as name when the attribute 'name=' is missing.
  * Adding method to navigate on workers.
  * Fixing module information.
  * Refactoring win32 module loading.
  * Implementing verbose format for timestamps.
  * Adding name() and logger methods on abstract object.
  * Better and translated responses on module info.
  * Fixing module property get.
  * Implementing 'trace' as ostream to be more consistent with info, warning and error.
  * Fixing service initialization.
  * Adding pkg-config variable for library name.
  * Debugging win32 threadpool.
  * Fixing win32 hang when stopping.
  * Refactoring agent state emission.
  * Updating win32 package control file.
  * Fixing agent startup when some computing is needed to get the first value.
  * Changing log message for quit by console request
  * Fixing win32 console handler dead lock.
  * Adjustments in worker default setup.
  * Fixing load of worker timeouts.
  * Adding timeout options in the protocol worker.
  * Fixing agent update timers.
  * Refactoring agent update engine.
  * Debugging agent reset.
  * Fixing segfault on service exit.
  * Fixing mimetypes.
  * Removing unused method from Application().
  * Adding module properties.
  * Fixing alertfactory.
  * stateFromValue is now computeState
  * Implementing method to get state value or range as string.
  * Fixing state value parsers.
  * Implementing converter for win32 double byte charsets.
  * Adding 'unsigned long long' parser.
  * Removing systemd/winregistry notifications from default root agent. Is now a SystemService() job.
  * Refactoring win32 log engine.
  * Refactoring linux log engine.
  * Changing log type for URL actions post/response strings.
  * Fixing 'SIGILL' expanding strings.
  * Fixing system state on startup.
  * Updating service status for windows.
  * Better system state info on linux.
  * Using default root state when child is 'ready'.
  * Changing the default 'ready' state to singleton.
  * Fixing state changes.
  * Fixing agent update timer.
  * Fixing notifications on state changes.
  * Setting state icons based on level value.
  * Fixing service settings file auto detection.
  * Agent state cant be null. Using the default one when agent setup dont set it.
  * Adding library version header.
  * Allowing construction from DataFile from XML definition.
  * Moving win32 log to programdata, small fixes on system and data paths.
  * Allowing redirect of systemdata dir using registry key, moving logs and cache to win32 programdata.
  * Getting system data path using win32 api.
  * Decorating linux console.
  * Replacing log message with the new method trace()
  * Fixing win32 module load.
  * Logging library name and revision.
  * Fixing win32 force uninstall.
  * Fixing win32 cleanup, allow file log disable.
  * Implementing test for install location.
  * Implementing win32 Application::InstallLocation() class.
  * Adding command line option to clean registry.
  * Splliting agent xml properties parser.
  * Implementing uninstall and cleanup.
  * Implementing method to enable/disable console output.
  * Adjustment for windows debug.
  * Adding trace() method for easy debugging.
  * Fixing service configuration search.
  * Fixing win32 module loading.
  * Adding win32 --timer= option.
  * Adding search paths for Suse cross-compiled modules.
  * Fixing win32 build.
  * Fixing win32 charset on error messages.
  * Allowing console attributes.
  * Improving win32 console.
  * Debugging charset conversion.
  * Working on exception charset.
  * Fixing msys build.
  * Adding vscode settings.
  * Fixing win32 charset and error message formatting.
  * Removing linux charset conversion.
  * Refactoring windows error messages.
  * Refactoring win32 charset conversion.
  * Updating obs workflow.
  * Fixing win32 async subprocess.
  * Refactoring win32 handlers
  * Implementing shared_ptr from "this" for abstract agents.
  * Fixing subprocess cleanup.
  * Fixing load from subprocess streams.
  * Fixing segfault while processing handler.
  * enhancing windows & linux service command line parser.
  * Small refactor in linux service start and command-line parsing.
  * Debugging linux async subprocess.
  * Fixing linux handler engine.
  * Refactoring linux async sub process.
  * Refactoring linux async subprocess.
  * Win32 syncronous subprocess refactored.
  * Refactor of windows handler.
  * Refactoring windows sub process engine.
  * Refactoring linux handlers.
  * Refactoring linux subprocess engine.
  * Refactoring I/O handlers.
  * Fixing timer class.
  * Fixing watchdog timer.
  * Fixing reconfiguration timer.
  * Implementing 'auto-exit' option.
  * Refactoring timer engine.
  * Adjusting module headers.
  * Adjustments in windows methods.
  * Moving private headers.
  * Moving agent private definitions to src/include/private/agent.h
  * Fixing task cleanup.
  * Fixing application startup when using debug mode on modules & libs.
  * Allowing module debugging in user's home.
  * Naming background threads.

-------------------------------------------------------------------
Wed Sep 14 15:41:20 UTC 2022 - perry.werneck@gmail.com

- Update to version 1.0+git20220914:
  * Investigating 'hanged' agents.
  * Investigating segfault at service cleanup.
  * Ignoring unnamed nodes when scanning from object childs.
  * Adding static method to verify protocol pointer.
  * Allowing syncronous alerts.
  * Debugging segfault on service cleanup.
  * Registering active workers; enabling script alerts in windows.
  * Waiting for background tasks after stopping agents.

-------------------------------------------------------------------
Wed Mar 17 22:19:20 UTC 2021 - Perry Werneck <perry.werneck@gmail.com>

- First build on obs. 
